#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define ALPHABET_SIZE 26
void generate_cipher_alphabet(const char *keyword, char *cipher_alphabet) {
    int used[ALPHABET_SIZE] = {0};
    int index = 0;
    for (int i = 0; keyword[i] != '\0'; i++) {
        char ch = toupper(keyword[i]);
        if (ch >= 'A' && ch <= 'Z' && !used[ch - 'A']) {
            cipher_alphabet[index++] = ch;
            used[ch - 'A'] = 1;
        }
    }
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            cipher_alphabet[index++] = ch;
        }
    }
    cipher_alphabet[index] = '\0';
}
void encrypt(const char *plaintext, const char *cipher_alphabet, char *ciphertext) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        char ch = toupper(plaintext[i]);
        if (ch >= 'A' && ch <= 'Z') {
            ciphertext[i] = cipher_alphabet[ch - 'A'];
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[strlen(plaintext)] = '\0';
}
int main() {
    char keyword[] = "CIPHER";
    char plaintext[100];
    char cipher_alphabet[ALPHABET_SIZE + 1];
    char ciphertext[100];
    generate_cipher_alphabet(keyword, cipher_alphabet);
    printf("Cipher alphabet: %s\n", cipher_alphabet);
    printf("Enter plaintext (only alphabetic characters): ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';
    encrypt(plaintext, cipher_alphabet, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);
    return 0;
}
