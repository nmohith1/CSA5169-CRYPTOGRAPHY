#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MATRIX_SIZE 2
#define MOD 26
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}
int determinant(int key[MATRIX_SIZE][MATRIX_SIZE]) {
    return (key[0][0] * key[1][1] - key[0][1] * key[1][0]) % MOD;
}
void encrypt(char *plaintext, int key[MATRIX_SIZE][MATRIX_SIZE], char *ciphertext) {
    int len = strlen(plaintext);
    int index = 0;
    for (int i = 0; i < len; i += MATRIX_SIZE) {
        int block[MATRIX_SIZE] = {0};
        for (int j = 0; j < MATRIX_SIZE; j++) {
            if (i + j < len) {
                block[j] = plaintext[i + j] - 'a';
            }
        }
        for (int j = 0; j < MATRIX_SIZE; j++) {
            int sum = 0;
            for (int k = 0; k < MATRIX_SIZE; k++) {
                sum += key[j][k] * block[k];
            }
            ciphertext[index++] = (sum % MOD) + 'a';
        }
    }
    ciphertext[index] = '\0';
}
void decrypt(char *ciphertext, int key[MATRIX_SIZE][MATRIX_SIZE], char *plaintext) {
    int det = determinant(key);
    int invDet = modInverse(det, MOD);
    int invKey[MATRIX_SIZE][MATRIX_SIZE];
    invKey[0][0] = key[1][1] * invDet % MOD;
    invKey[0][1] = -key[0][1] * invDet % MOD;
    invKey[1][0] = -key[1][0] * invDet % MOD;
    invKey[1][1] = key[0][0] * invDet % MOD;
    for (int i = 0; i < MATRIX_SIZE; i++) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            if (invKey[i][j] < 0) {
                invKey[i][j] += MOD;
            }
        }
    }
    int len = strlen(ciphertext);
    int index = 0;
    for (int i = 0; i < len; i += MATRIX_SIZE) {
        int block[MATRIX_SIZE] = {0};
        for (int j = 0; j < MATRIX_SIZE; j++) {
            if (i + j < len) {
                block[j] = ciphertext[i + j] - 'a';
            }
        }
        for (int j = 0; j < MATRIX_SIZE; j++) {
            int sum = 0;
            for (int k = 0; k < MATRIX_SIZE; k++) {
                sum += invKey[j][k] * block[k];
            }
            plaintext[index++] = (sum % MOD + MOD) % MOD + 'a';
        }
    }
    plaintext[index] = '\0';
}
int main() {
    char plaintext[] = "meetmeattheusualplaceattenrathertahaneightoclock";
    char ciphertext[100];
    char decrypted[100];
    int key[MATRIX_SIZE][MATRIX_SIZE] = {
        {9, 4},
        {5, 7}
    };
    encrypt(plaintext, key, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);
    decrypt(ciphertext, key, decrypted);
    printf("Decrypted Text: %s\n", decrypted);
    return 0;
}
