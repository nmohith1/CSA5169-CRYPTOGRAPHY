#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26
#define MAX_CIPHERTEXT_LENGTH 1000
#define TOP_N 10

// Function to calculate letter frequency in the ciphertext
void calculateFrequency(const char *ciphertext, double *frequency) {
    int count[ALPHABET_SIZE] = {0};
    int totalLetters = 0;

    for (int i = 0; ciphertext[i]; i++) {
        if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            count[ciphertext[i] - 'a']++;
            totalLetters++;
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        frequency[i] = (double)count[i] / totalLetters;
    }
}

// Function to decrypt the ciphertext with a specific shift
void decrypt(const char *ciphertext, int shift, char *plaintext) {
    for (int i = 0; ciphertext[i]; i++) {
        if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            plaintext[i] = (ciphertext[i] - 'a' - shift + ALPHABET_SIZE) % ALPHABET_SIZE + 'a';
        } else {
            plaintext[i] = ciphertext[i]; // Non-alphabetic characters remain unchanged
        }
    }
}

// Function to rank possible plaintexts based on frequency analysis
void rankPlaintexts(const char *ciphertext, int topN) {
    char plaintext[MAX_CIPHERTEXT_LENGTH];
    double frequency[ALPHABET_SIZE];
    calculateFrequency(ciphertext, frequency);

    // Display possible plaintexts based on shifts
    printf("Top %d possible plaintexts:\n", topN);
    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        decrypt(ciphertext, shift, plaintext);
        printf("Shift %2d: %s\n", shift, plaintext);
    }
}

int main() {
    char ciphertext[MAX_CIPHERTEXT_LENGTH];
    int topN;

    // Input ciphertext
    printf("Enter the ciphertext (lowercase letters only): ");
    fgets(ciphertext, MAX_CIPHERTEXT_LENGTH, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove newline character

    // Input number of top possible plaintexts
    printf("Enter the number of top possible plaintexts to display (1-%d): ", TOP_N);
    scanf("%d", &topN);
    if (topN < 1 || topN > TOP_N) {
        printf("Invalid input. Defaulting to %d.\n", TOP_N);
        topN = TOP_N;
    }

    // Rank possible plaintexts
    rankPlaintexts(ciphertext, topN);

    return 0;
}
